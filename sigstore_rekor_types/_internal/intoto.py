# generated by datamodel-codegen:
#   timestamp: 2023-10-04T14:54:08+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional, Union

from pydantic import BaseModel, Field, RootModel, StrictStr


class Algorithm(Enum):
    SHA256 = "sha256"


class Hash(BaseModel):
    algorithm: Algorithm = Field(
        ...,
        description="The hashing function used to compute the hash value",
    )
    value: StrictStr = Field(..., description="The hash value for the archive")


class PayloadHash(BaseModel):
    algorithm: Algorithm = Field(
        ...,
        description="The hashing function used to compute the hash value",
    )
    value: StrictStr = Field(..., description="The hash value for the envelope's payload")


class Content(BaseModel):
    envelope: Optional[StrictStr] = Field(None, description="envelope")
    hash: Optional[Hash] = Field(
        None,
        description=(
            "Specifies the hash algorithm and value encompassing the entire signed envelope; this"
            " is computed by the rekor server, client-provided values are ignored"
        ),
    )
    payload_hash: Optional[PayloadHash] = Field(
        None,
        alias="payloadHash",
        description=(
            "Specifies the hash algorithm and value covering the payload within the DSSE envelope;"
            " this is computed by the rekor server, client-provided values are ignored"
        ),
    )


class IntotoV001Schema(BaseModel):
    content: Content
    public_key: str = Field(
        ...,
        alias="publicKey",
        description="The public key that can verify the signature",
    )


class Signature(BaseModel):
    keyid: Optional[StrictStr] = Field(
        None,
        description="optional id of the key used to create the signature",
    )
    sig: str = Field(..., description="signature of the payload")
    public_key: str = Field(
        ...,
        alias="publicKey",
        description="public key that corresponds to this signature",
    )


class Envelope(BaseModel):
    payload: Optional[str] = Field(None, description="payload of the envelope")
    payload_type: StrictStr = Field(
        ...,
        alias="payloadType",
        description="type describing the payload",
    )
    signatures: list[Signature] = Field(
        ...,
        description="collection of all signatures of the envelope's payload",
        min_length=1,
    )


class Hash1(BaseModel):
    algorithm: Algorithm = Field(
        ...,
        description="The hashing function used to compute the hash value",
    )
    value: StrictStr = Field(..., description="The hash value for the archive")


class PayloadHash1(BaseModel):
    algorithm: Algorithm = Field(
        ...,
        description="The hashing function used to compute the hash value",
    )
    value: StrictStr = Field(..., description="The hash value of the payload")


class Content1(BaseModel):
    envelope: Envelope = Field(..., description="dsse envelope")
    hash: Optional[Hash1] = Field(
        None,
        description=(
            "Specifies the hash algorithm and value encompassing the entire signed envelope"
        ),
    )
    payload_hash: Optional[PayloadHash1] = Field(
        None,
        alias="payloadHash",
        description=(
            "Specifies the hash algorithm and value covering the payload within the DSSE envelope"
        ),
    )


class IntotoV002Schema(BaseModel):
    content: Content1


class IntotoSchema(RootModel[Union[IntotoV001Schema, IntotoV002Schema]]):
    root: Union[IntotoV001Schema, IntotoV002Schema] = Field(
        ...,
        description="Intoto for Rekord objects",
        title="Intoto Schema",
    )
