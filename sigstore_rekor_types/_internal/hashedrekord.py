# generated by datamodel-codegen:
#   timestamp: 2023-10-04T15:20:03+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, RootModel, StrictStr


class PublicKey(BaseModel):
    content: Optional[str] = Field(
        None,
        description=(
            "Specifies the content of the public key or code signing certificate inline within the"
            " document"
        ),
    )


class Signature(BaseModel):
    content: Optional[str] = Field(
        None,
        description="Specifies the content of the signature inline within the document",
    )
    public_key: Optional[PublicKey] = Field(
        None,
        alias="publicKey",
        description=(
            "The public key that can verify the signature; this can also be an X509 code signing"
            " certificate that contains the raw public key information"
        ),
    )


class Algorithm(Enum):
    SHA256 = "sha256"


class Hash(BaseModel):
    algorithm: Algorithm = Field(
        ...,
        description="The hashing function used to compute the hash value",
    )
    value: StrictStr = Field(..., description="The hash value for the content")


class Data(BaseModel):
    hash: Optional[Hash] = Field(
        None,
        description="Specifies the hash algorithm and value for the content",
    )


class HashedrekordV001Schema(BaseModel):
    signature: Signature = Field(
        ...,
        description="Information about the detached signature associated with the entry",
    )
    data: Data = Field(..., description="Information about the content associated with the entry")


class RekorSchema(RootModel[HashedrekordV001Schema]):
    root: HashedrekordV001Schema = Field(
        ...,
        description="Schema for Rekord objects",
        title="Rekor Schema",
    )
