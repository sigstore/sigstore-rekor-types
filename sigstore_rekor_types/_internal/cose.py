# generated by datamodel-codegen:
#   timestamp: 2023-10-04T15:20:02+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, RootModel, StrictStr


class Algorithm(Enum):
    SHA256 = "sha256"


class PayloadHash(BaseModel):
    algorithm: Algorithm = Field(
        ...,
        description="The hashing function used to compute the hash value",
    )
    value: StrictStr = Field(..., description="The hash value for the content")


class EnvelopeHash(BaseModel):
    algorithm: Algorithm = Field(
        ...,
        description="The hashing function used to compute the hash value",
    )
    value: StrictStr = Field(..., description="The hash value for the envelope")


class Data(BaseModel):
    payload_hash: Optional[PayloadHash] = Field(
        None,
        alias="payloadHash",
        description="Specifies the hash algorithm and value for the content",
    )
    envelope_hash: Optional[EnvelopeHash] = Field(
        None,
        alias="envelopeHash",
        description="Specifies the hash algorithm and value for the COSE envelope",
    )
    aad: Optional[str] = Field(
        None,
        description="Specifies the additional authenticated data required to verify the signature",
    )


class CoseV001Schema(BaseModel):
    message: Optional[str] = Field(None, description="The COSE Sign1 Message")
    public_key: str = Field(
        ...,
        alias="publicKey",
        description="The public key that can verify the signature",
    )
    data: Data = Field(..., description="Information about the content associated with the entry")


class CoseSchema(RootModel[CoseV001Schema]):
    root: CoseV001Schema = Field(..., description="COSE for Rekord objects", title="COSE Schema")
